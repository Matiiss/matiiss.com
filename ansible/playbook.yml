---
# - name: Set authorized keys taken from url
#   hosts: all

#   ansible.posix.authorized_key:
#     user: matiiss
#     state: present
#     key: https://github.com/Matiiss.keys

# - import_playbook: disable-root-login.yml

# - import_playbook: docker-setup.yml

- name: Update, build, and run containers
  hosts: all

  tasks:
    - name: Pull updates from the git remote
      ansible.builtin.git:
        repo: https://github.com/Matiiss/matiiss.com
        dest: /root/matiiss.com

    - name: Build Flask app
      community.docker.docker_image:
        build:
          path: /root/matiiss.com
        name: flask_app
        source: build
        force_source: true

    - name: Build nginx reverse proxy
      community.docker.docker_image:
        build:
          path: /root/matiiss.com/nginx_reverse_proxy
        name: nginx_reverse_proxy
        source: build
        force_source: true

    - name: Create a volume for cache
      community.docker.docker_volume:
        name: nginx_cache
    
    - name: Create a volume for ssl
      community.docker.docker_volume:
        name: ssl

    - name: Create a network
      community.docker.docker_network:
        name: net

    - name: Start Flask app
      community.docker.docker_container:
        name: flask_app
        image: flask_app
        networks:
          - name: net
        ports:
          - "8000:8000"

- name: Update, build, and run nextjs containers
  hosts: all

  tasks:
    - name: Pull updates from the next.js git remote
      ansible.builtin.git:
        repo: https://github.com/Matiiss/matiiss.com-nextjs
        dest: /root/matiiss.com-nextjs

    - name: Build next.js app
      community.docker.docker_image:
        build:
          path: /root/matiiss.com-nextjs
        name: nextjs-app
        source: build
        force_source: true

    - name: Start next.js app
      community.docker.docker_container:
        name: nextjs-app
        image: nextjs-app
        networks:
          - name: net
        ports:
          - "8080:8080"

- name: Set up acme.sh with docker and DO API
  hosts: all

  vars:
    DO_API_KEY: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          31353433383136366366656332306136363163346539393033393833366134383632376364613131
          6364396234653330336632333236653866313434366437620a663233313561376266353533623434
          32363936356436623935386139366464356337633463636162636334623465353036653636343834
          3034303737666361330a353832636263306230363466643532623563336131613364373633313265
          35303437373466343438303037333865333966383439636163643430316131383338616638326330
          37396461333763646537626331646135653263343061623861633236353731613664333637333862
          33636239623836613931333764343266343430373439373663356232343834346338643135666538
          63626466616332353064

  tasks:
    - name: Pull updates from acme.sh remote
      ansible.builtin.git:
        repo: https://github.com/acmesh-official/acme.sh
        dest: /root/acme.sh
        depth: 1

    - name: Build acme.sh image
      community.docker.docker_image:
        build:
          path: /root/acme.sh
        name: acme.sh
        source: build

    - name: Run acme.sh daemon
      community.docker.docker_container:
        name: acme.sh
        image: acme.sh
        command: daemon
        volumes:
          - acme.sh:/acme.sh
          - /var/run/docker.sock:/var/run/docker.sock

    - name: Register account
      community.docker.docker_container_exec:
        container: acme.sh
        command: --register-account -m matiiss@matiiss.com

    - name: Issue SSL certificates
      community.docker.docker_container_exec:
        container: acme.sh
        env:
          DO_API_KEY: "{{ DO_API_KEY }}"
        command: --issue --dns dns_dgon -d matiiss.com -d www.matiiss.com -d blog.matiiss.com -d www.blog.matiiss.com --force

    - name: Run temp nginx container and add ssl stuff to a volume
      community.docker.docker_container:
        name: temp_nginx
        image: nginx
        volumes:
          - ssl:/etc/nginx/ssl
        labels:
          sh.acme.autoload.domain: matiiss.com
        auto_remove: true

    
    - name: Install SSL certificates to nginx container
      community.docker.docker_container_exec:
        container: acme.sh
        env:
          DEPLOY_DOCKER_CONTAINER_LABEL: sh.acme.autoload.domain=matiiss.com
          DEPLOY_DOCKER_CONTAINER_KEY_FILE: /etc/nginx/ssl/matiiss.com/key.pem
          DEPLOY_DOCKER_CONTAINER_CERT_FILE: /etc/nginx/ssl/matiiss.com/cert.pem
          # DEPLOY_DOCKER_CONTAINER_CA_FILE: /etc/nginx/ssl/matiiss.com/ca.pem
          DEPLOY_DOCKER_CONTAINER_FULLCHAIN_FILE: /etc/nginx/ssl/matiiss.com/full.pem
          DEPLOY_DOCKER_CONTAINER_RELOAD_CMD: service nginx force-reload
        command: 
          --deploy -d matiiss.com -d *.matiiss.com --deploy-hook docker
    
    - name: Stop temp nginx container
      community.docker.docker_container:
        name: temp_nginx
        state: absent

- name: Start nginx reverse proxy
  hosts: all

  tasks:
    - name: Start nginx reverse proxy
      community.docker.docker_container:
        name: nginx_reverse_proxy
        image: nginx_reverse_proxy
        networks:
          - name: net
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - nginx_cache:/var/cache/nginx
          - ssl:/etc/nginx/ssl
        labels:
          sh.acme.autoload.domain: matiiss.com
