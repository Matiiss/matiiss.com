---
# - name: Set authorized keys taken from url
#   hosts: all

#   ansible.posix.authorized_key:
#     user: matiiss
#     state: present
#     key: https://github.com/Matiiss.keys

# - import_playbook: disable-root-login.yml

# - import_playbook: docker-setup.yml

- name: Set up acme.sh with docker and DO API
  hosts: all

  vars:
    DO_API_KEY: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          30363964636462346139303135646438613863626663393834613338626466383330363834613938
          6161326438663735313633383834323835653362633861610a353731396337643939316433393830
          33363936626664303063656561303634636236376236666566386236663961343033616265396263
          3566303339313031380a303735373434323936323062303264323131313130393161366236336534
          33656639363433636365623238643635646561323638336632393637336534636633663562643134
          38396161303335396138613237326336613936336661303132613035663037666663313239636138
          37653735383065383938653765396662306332653364626139313335393334643265333138633630
          38306365323234343565

  tasks:
    # - name: Pull updates from acme.sh remote
    #   ansible.builtin.git:
    #     repo: https://github.com/acmesh-official/acme.sh
    #     dest: /root/acme.sh
    #     depth: 1
    
    # - name: Build acme.sh image
    #   community.docker.docker_image:
    #     build:
    #       path: /root/acme.sh
    #     name: acme.sh
    #     source: build
    
    # - name: Run acme.sh daemon
    #   community.docker.docker_container:
    #     name: acme.sh
    #     image: acme.sh
    #     volumes:
    #       - acme.sh:/acme.sh
    #       - /var/run/docker.sock:/var/run/docker.sock
    
    # - name: Issue SSL certificates
    #   community.docker.docker_container_exec:
    #     container: acme.sh
    #     env:
    #       DO_API_KEY: "{{ DO_API_KEY }}"
    #     command: --issue --dns dns_dgon -d matiiss.com -d *.matiiss.com
    
    - name: Install SSL certificates to volume
      community.docker.docker_container_exec:
        container: acme.sh
        command: >
                --install-cert -d matiiss.com -d *.matiiss.com 
                --cert-file /acme.sh/ssl/matiiss.com/cert.pem
                --key-file /acme.sh/ssl/matiiss.com/key.pem 
                --fullchain-file /acme.sh/ssl/matiiss.com/full.pem 
                --reloadcmd "docker exec -it nginx_reverse_proxy service nginx force-reload"
      ignore_errors: true


- name: Update, build, and run containers
  hosts: all

  tasks:
    - name: Pull updates from the git remote
      ansible.builtin.git:
        repo: https://github.com/Matiiss/matiiss.com
        dest: /root/matiiss.com

    - name: Build Flask app
      community.docker.docker_image:
        build:
          path: /root/matiiss.com
        name: flask_app
        source: build
        force_source: true

    # - name: Build Apache2 reverse proxy
    #   community.docker.docker_image:
    #     build:
    #       path: /root/matiiss.com/apache_reverse_proxy
    #     name: apache_reverse_proxy
    #     source: build
    #     force_source: true

    - name: Build nginx reverse proxy
      community.docker.docker_image:
        build:
          path: /root/matiiss.com/nginx_reverse_proxy
        name: nginx_reverse_proxy
        source: build
        force_source: true

    - name: Create a volume for cache
      community.docker.docker_volume:
        name: nginx_cache

    - name: Create a network
      community.docker.docker_network:
        name: net

    # - name: Start Apache2 reverse proxy
    #   community.docker.docker_container:
    #     name: apache_reverse_proxy
    #     image: apache_reverse_proxy
    #     networks:
    #       - name: net
    #     ports:
    #       - "80:80"
    #       - "443:443"
    #     volumes:
    #       - public:/usr/local/apache2/htdocs

    - name: Start Flask app
      community.docker.docker_container:
        name: flask_app
        image: flask_app
        networks:
          - name: net
        ports:
          - "8000:8000"
        # volumes:
        #   - public:/public
    
    - name: Start nginx reverse proxy
      community.docker.docker_container:
        name: nginx_reverse_proxy
        image: nginx_reverse_proxy
        networks:
          - name: net
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - nginx_cache:/var/cache/nginx
          - acme.sh/ssl:/etc/nginx/ssl
          